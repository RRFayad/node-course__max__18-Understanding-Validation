289. Module Introduction

    - Why Validate User Input?
    - How to Validate?

291. How to validate?

    - We can validate on the client side and also display an error in the browser (which can improve the UX)
        - This is not a protection of security, as it's in the client side, the user could change the code
    
    - We must validate in the Server-Side
        - As it can not be manipulated

    - There's some built in validation in da DataBase, but it's also optional (the mos important is the server-side validation)

292. Setup & Basic Validation

    * We will start with some validations in the signup form 

    - NPM INSTALL EXPRESS-VALIDATOR

    * We want to start with the postSignUp

    Steps:
        1. npm install express-validator;
        2. require: (we just required the check method) (check auth routes)
            const { check } = require("express-validator");
        3. In the route, we set a new middleware, the will check (the argument is the name of the field, as it's named in the view) and a checking method:
            router.post("/signup", check("email").isEmail(), authController.postSignup);
        4. In the controller method:
            a. Get the errors
              const errors = validationResult(req);
            b. Check if there are errors
                  if (!errors.isEmpty()) {
                     return res.status(422).render("auth/signup", {
                        path: "/signup",
                        pageTitle: "Signup",
                        errorMessage: errors.array(),
                    });
                    }
            * Obs.: 422 is a default response status for validation
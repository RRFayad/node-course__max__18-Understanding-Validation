289. Module Introduction

    - Why Validate User Input?
    - How to Validate?

291. How to validate?

    - We can validate on the client side and also display an error in the browser (which can improve the UX)
        - This is not a protection of security, as it's in the client side, the user could change the code
    
    - We must validate in the Server-Side
        - As it can not be manipulated

    - There's some built in validation in da DataBase, but it's also optional (the mos important is the server-side validation)

292. Setup & Basic Validation

    * We will start with some validations in the signup form 

    - NPM INSTALL EXPRESS-VALIDATOR

    * We want to start with the postSignUp

    Steps:
        1. npm install express-validator;
        2. require: (we just required the check method) (check auth routes)
            const { check } = require("express-validator");
        3. In the route, we set a new middleware, the will check (the argument is the name of the field, as it's named in the view) and a checking method:
            router.post("/signup", check("email").isEmail(), authController.postSignup);
        4. In the controller method:
            a. Get the errors
              const errors = validationResult(req);
            b. Check if there are errors
                  if (!errors.isEmpty()) {
                     return res.status(422).render("auth/signup", {
                        path: "/signup",
                        pageTitle: "Signup",
                        errorMessage: errors.array(),
                    });
                    }
            * Obs.: 422 is a default response status for validation

293. Using Validation Error Messages

    IN the route:
        router.post("/signup",check("email").isEmail().withMessage("Please Enter a valid e-mail"),authController.postSignup);

    - In the controller:
            errorMessage: errors.array()[0].msg,

294. Built-In & Custom Validators

    - There are more validators than the isEmail
        * express-validator is a express middleware that wraps the validator js
            https://github.com/validatorjs/validator.js

    - router.post(
        "/signup",
        check("email", "Please Enter a valid e-mail")
            .isEmail()
            .custom((value, { req }) => {
            // This is a dummy logic, but just to show that we can create our own custom validations
            if (value === "test@test.com") {
                throw new Error("This email address is forbidden");
            }
            return true;
            }),
        authController.postSignup
    );

    - We have to get the error in the controller and work with it:
        * remember to require the validationResul method

          const errors = validationResult(req);

            if (!errors.isEmpty()) {
                return res.status(422).render("auth/login", {
                path: "/signup",
                pageTitle: "Signup",
                errorMessage: errors.array()[0].msg,
                });
            }

        * return true is the return of a posotive valdiation

295. More Validators
    * We want to add a new middleware, to validate the password (if it's at least 6 characters long)

    - It's recommended to work with an array of validators

    * It can be one message per validator, or a message for all the checks iun one item

296. Checking For Field Equality

    * Created a simple logic to check the password x confirmPassword

297. Adding Async Validation
    - Summing up, we can return Promise.reject() to a rejected validation

ASSIGNMENT:
    - In the login page:
        - Add validation to be sure the email address is an email and the password has the same logic from signup

298. Keeping User Input (UX purposes)

    - Thinking a bit more about UX, we want to keep the data in the input field after de user
    
    - It's like a 'technique'
        - We created a OldInput value for the rendering views, that are empty at first and we pass it in the posts methods
            - This let us keep the values for the new requests, and keep qht the user filled before

299. Adding Conditional CSS Classes

    - It's just about using the information and render in a class value in our ejs file

    * I should check the object that comes from the errors to understand better how to manipulate, but
        It has a param value, which contains the param I defined in the validation function, e.g.:
              errors: [
                    {
                    value: 'qwe',
                    msg: 'Please Enter a valid e-mail',
                    param: 'email',
                    location: 'body'
                    }
                ]

300. Adding Validation to Login
    * No new concepts, just added the rrors / validation logic to the login controllet and route

301. Sanitizing Data
    - Sanitize data is to process data in a way that makes sense to be done, to as lower casing email, trim etc

    - It's better to sanitize inputs,
        - We have some methods in the express-validator library;
        - We set the sanitizer together with the validators (check auth routes)

302. Validating Product Addition
    - 